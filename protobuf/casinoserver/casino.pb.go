// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: casino.proto

/*
	Package casinoserver is a generated protocol buffer package.

	It is generated from these files:
		casino.proto

	It has these top-level messages:
		SentNoticeRequest
		SentNoticeReply
		ReceiveNoticeRequest
		ReceiveNoticeReply
*/
package casinoserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 转款通知请求
type SentNoticeRequest struct {
	AssetId    string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Asset      string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAssetId string `protobuf:"bytes,4,opt,name=fee_asset_id,json=feeAssetId,proto3" json:"fee_asset_id,omitempty"`
	FeeAsset   string `protobuf:"bytes,5,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	FeeAmount  uint64 `protobuf:"varint,6,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	BlockNum   uint64 `protobuf:"varint,7,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Memo       string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *SentNoticeRequest) Reset()                    { *m = SentNoticeRequest{} }
func (m *SentNoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*SentNoticeRequest) ProtoMessage()               {}
func (*SentNoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptorCasino, []int{0} }

func (m *SentNoticeRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *SentNoticeRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *SentNoticeRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SentNoticeRequest) GetFeeAssetId() string {
	if m != nil {
		return m.FeeAssetId
	}
	return ""
}

func (m *SentNoticeRequest) GetFeeAsset() string {
	if m != nil {
		return m.FeeAsset
	}
	return ""
}

func (m *SentNoticeRequest) GetFeeAmount() uint64 {
	if m != nil {
		return m.FeeAmount
	}
	return 0
}

func (m *SentNoticeRequest) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *SentNoticeRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// 转款通知回复
type SentNoticeReply struct {
}

func (m *SentNoticeReply) Reset()                    { *m = SentNoticeReply{} }
func (m *SentNoticeReply) String() string            { return proto.CompactTextString(m) }
func (*SentNoticeReply) ProtoMessage()               {}
func (*SentNoticeReply) Descriptor() ([]byte, []int) { return fileDescriptorCasino, []int{1} }

// 收款通知请求
type ReceiveNoticeRequest struct {
	AssetId  string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Asset    string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount   uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockNum uint64 `protobuf:"varint,4,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *ReceiveNoticeRequest) Reset()                    { *m = ReceiveNoticeRequest{} }
func (m *ReceiveNoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceiveNoticeRequest) ProtoMessage()               {}
func (*ReceiveNoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptorCasino, []int{2} }

func (m *ReceiveNoticeRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *ReceiveNoticeRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *ReceiveNoticeRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReceiveNoticeRequest) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *ReceiveNoticeRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// 收款通知回复
type ReceiveNoticeReply struct {
}

func (m *ReceiveNoticeReply) Reset()                    { *m = ReceiveNoticeReply{} }
func (m *ReceiveNoticeReply) String() string            { return proto.CompactTextString(m) }
func (*ReceiveNoticeReply) ProtoMessage()               {}
func (*ReceiveNoticeReply) Descriptor() ([]byte, []int) { return fileDescriptorCasino, []int{3} }

func init() {
	proto.RegisterType((*SentNoticeRequest)(nil), "casinoserver.SentNoticeRequest")
	proto.RegisterType((*SentNoticeReply)(nil), "casinoserver.SentNoticeReply")
	proto.RegisterType((*ReceiveNoticeRequest)(nil), "casinoserver.ReceiveNoticeRequest")
	proto.RegisterType((*ReceiveNoticeReply)(nil), "casinoserver.ReceiveNoticeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Casino service

type CasinoClient interface {
	// SentNotice 转款通知
	SentNotice(ctx context.Context, in *SentNoticeRequest, opts ...grpc.CallOption) (*SentNoticeReply, error)
	// ReceiveNotice 收款通知
	ReceiveNotice(ctx context.Context, in *ReceiveNoticeRequest, opts ...grpc.CallOption) (*ReceiveNoticeReply, error)
}

type casinoClient struct {
	cc *grpc.ClientConn
}

func NewCasinoClient(cc *grpc.ClientConn) CasinoClient {
	return &casinoClient{cc}
}

func (c *casinoClient) SentNotice(ctx context.Context, in *SentNoticeRequest, opts ...grpc.CallOption) (*SentNoticeReply, error) {
	out := new(SentNoticeReply)
	err := grpc.Invoke(ctx, "/casinoserver.Casino/SentNotice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoClient) ReceiveNotice(ctx context.Context, in *ReceiveNoticeRequest, opts ...grpc.CallOption) (*ReceiveNoticeReply, error) {
	out := new(ReceiveNoticeReply)
	err := grpc.Invoke(ctx, "/casinoserver.Casino/ReceiveNotice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Casino service

type CasinoServer interface {
	// SentNotice 转款通知
	SentNotice(context.Context, *SentNoticeRequest) (*SentNoticeReply, error)
	// ReceiveNotice 收款通知
	ReceiveNotice(context.Context, *ReceiveNoticeRequest) (*ReceiveNoticeReply, error)
}

func RegisterCasinoServer(s *grpc.Server, srv CasinoServer) {
	s.RegisterService(&_Casino_serviceDesc, srv)
}

func _Casino_SentNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).SentNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casinoserver.Casino/SentNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).SentNotice(ctx, req.(*SentNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casino_ReceiveNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).ReceiveNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casinoserver.Casino/ReceiveNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).ReceiveNotice(ctx, req.(*ReceiveNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Casino_serviceDesc = grpc.ServiceDesc{
	ServiceName: "casinoserver.Casino",
	HandlerType: (*CasinoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SentNotice",
			Handler:    _Casino_SentNotice_Handler,
		},
		{
			MethodName: "ReceiveNotice",
			Handler:    _Casino_ReceiveNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casino.proto",
}

func (m *SentNoticeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentNoticeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.AssetId)))
		i += copy(dAtA[i:], m.AssetId)
	}
	if len(m.Asset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.Asset)))
		i += copy(dAtA[i:], m.Asset)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCasino(dAtA, i, uint64(m.Amount))
	}
	if len(m.FeeAssetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.FeeAssetId)))
		i += copy(dAtA[i:], m.FeeAssetId)
	}
	if len(m.FeeAsset) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.FeeAsset)))
		i += copy(dAtA[i:], m.FeeAsset)
	}
	if m.FeeAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCasino(dAtA, i, uint64(m.FeeAmount))
	}
	if m.BlockNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCasino(dAtA, i, uint64(m.BlockNum))
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	return i, nil
}

func (m *SentNoticeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentNoticeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReceiveNoticeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveNoticeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.AssetId)))
		i += copy(dAtA[i:], m.AssetId)
	}
	if len(m.Asset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.Asset)))
		i += copy(dAtA[i:], m.Asset)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCasino(dAtA, i, uint64(m.Amount))
	}
	if m.BlockNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCasino(dAtA, i, uint64(m.BlockNum))
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCasino(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	return i, nil
}

func (m *ReceiveNoticeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveNoticeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintCasino(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SentNoticeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCasino(uint64(m.Amount))
	}
	l = len(m.FeeAssetId)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	l = len(m.FeeAsset)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	if m.FeeAmount != 0 {
		n += 1 + sovCasino(uint64(m.FeeAmount))
	}
	if m.BlockNum != 0 {
		n += 1 + sovCasino(uint64(m.BlockNum))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	return n
}

func (m *SentNoticeReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReceiveNoticeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCasino(uint64(m.Amount))
	}
	if m.BlockNum != 0 {
		n += 1 + sovCasino(uint64(m.BlockNum))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCasino(uint64(l))
	}
	return n
}

func (m *ReceiveNoticeReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovCasino(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCasino(x uint64) (n int) {
	return sovCasino(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SentNoticeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasino
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentNoticeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentNoticeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			m.FeeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCasino(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasino
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentNoticeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasino
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentNoticeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentNoticeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCasino(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasino
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveNoticeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasino
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveNoticeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveNoticeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasino
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCasino(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasino
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveNoticeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasino
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveNoticeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveNoticeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCasino(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasino
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCasino(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCasino
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasino
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCasino
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCasino
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCasino(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCasino = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCasino   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("casino.proto", fileDescriptorCasino) }

var fileDescriptorCasino = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xc1, 0x4e, 0xea, 0x50,
	0x10, 0xe5, 0xbe, 0x57, 0x4a, 0x99, 0x60, 0x94, 0x09, 0x31, 0x57, 0x08, 0xb5, 0xe9, 0x8a, 0x15,
	0x0b, 0xfd, 0x02, 0x74, 0xe5, 0x86, 0x45, 0x5d, 0xb8, 0x24, 0x50, 0x86, 0xa4, 0x91, 0xf6, 0x62,
	0x7b, 0x4b, 0xc2, 0x5f, 0xb8, 0xf4, 0x37, 0xfc, 0x0b, 0x97, 0x7e, 0x82, 0xa9, 0x4b, 0x7f, 0xc2,
	0x30, 0xad, 0xd8, 0xaa, 0xb8, 0x73, 0x77, 0xcf, 0x9c, 0x33, 0xa7, 0x67, 0x66, 0x0a, 0x2d, 0x7f,
	0x9a, 0x04, 0x91, 0x1a, 0xae, 0x62, 0xa5, 0x15, 0x16, 0x28, 0xa1, 0x78, 0x4d, 0xb1, 0xfb, 0x26,
	0xa0, 0x7d, 0x4d, 0x91, 0x1e, 0x2b, 0x1d, 0xf8, 0xe4, 0xd1, 0x5d, 0x4a, 0x89, 0xc6, 0x13, 0xb0,
	0xa6, 0x49, 0x42, 0x7a, 0x12, 0xcc, 0xa5, 0x70, 0xc4, 0xa0, 0xe9, 0x35, 0x18, 0x5f, 0xcd, 0xb1,
	0x03, 0x75, 0x7e, 0xca, 0x7f, 0x5c, 0xcf, 0x01, 0x1e, 0x83, 0x39, 0x0d, 0x55, 0x1a, 0x69, 0xf9,
	0xdf, 0x11, 0x03, 0xc3, 0x2b, 0x10, 0x3a, 0xd0, 0x5a, 0x10, 0x4d, 0x76, 0x66, 0x06, 0x37, 0xc1,
	0x82, 0x68, 0x54, 0xf8, 0xf5, 0xa0, 0xb9, 0x53, 0xc8, 0x3a, 0xd3, 0xd6, 0x07, 0x8d, 0x7d, 0x00,
	0x26, 0x73, 0x6b, 0x93, 0xad, 0xb7, 0xf2, 0x51, 0xee, 0xde, 0x83, 0xe6, 0x6c, 0xa9, 0xfc, 0xdb,
	0x49, 0x94, 0x86, 0xb2, 0xc1, 0xac, 0xc5, 0x85, 0x71, 0x1a, 0x22, 0x82, 0x11, 0x52, 0xa8, 0xa4,
	0xc5, 0x9e, 0xfc, 0x76, 0xdb, 0x70, 0x58, 0x1e, 0x76, 0xb5, 0xdc, 0xb8, 0xf7, 0x02, 0x3a, 0x1e,
	0xf9, 0x14, 0xac, 0xe9, 0x8f, 0x76, 0x50, 0x49, 0x69, 0xec, 0x49, 0x59, 0x2f, 0xa5, 0xec, 0x00,
	0x7e, 0x49, 0xb4, 0x5a, 0x6e, 0xce, 0x1e, 0x05, 0x98, 0x97, 0x7c, 0x3a, 0x1c, 0x03, 0x7c, 0x8e,
	0x81, 0xa7, 0xc3, 0xf2, 0x45, 0x87, 0xdf, 0xae, 0xd9, 0xed, 0xef, 0x17, 0x6c, 0x37, 0x50, 0xc3,
	0x1b, 0x38, 0xa8, 0x7c, 0x10, 0xdd, 0x6a, 0xc7, 0x4f, 0xfb, 0xe9, 0x3a, 0xbf, 0x6a, 0xd8, 0xf8,
	0xe2, 0xe8, 0x29, 0xb3, 0xc5, 0x73, 0x66, 0x8b, 0x97, 0xcc, 0x16, 0x0f, 0xaf, 0x76, 0x6d, 0x66,
	0xf2, 0x4f, 0x78, 0xfe, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x33, 0xd6, 0x30, 0xf5, 0x94, 0x02, 0x00,
	0x00,
}
